<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Tymon\JWTAuth\Contracts\JWTSubject;

class User extends Authenticatable implements JWTSubject
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $table = 'user';


    public $timestamps = false;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'user_audit_status',
        'user_auth_key',
        'user_token_id',
        'user_avatar',
        'user_cert_no',
        'user_create_at',
        'user_create_by',
        'user_current_organization_code',
        'user_email',
        'user_expire_end_time',
        'user_expire_start_time',
        'user_expire_type',
        'user_extra',
        'user_id',
        'user_mobile',
        'user_name',
        'user_password_hash',
        'user_password_reset_token',
        'user_remark',
        'user_sso_no',
        'user_sso_pw_init',
        'user_status',
        'user_username',
        'user_uuid',
        'user_verification_token',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'user_password_hash',
        'user_password_reset_token',
        'user_verification_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'user_extra' => 'json',
    ];

    public function getKeyName()
    {
        return 'user_id'; // TODO: Change the autogenerated stub
    }

    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [
            'uat' => md5(request()->userAgent()),
        ];
    }

    public function getAuthPassword()
    {
        return $this->user_password_hash;
    }

    public function isSuperAdmin(): bool
    {
        $extra = $this->user_extra;
        if (!$extra) {
            return false;
        }
        return ($extra['super_admin'] ?? 0) === 1;
    }
}
